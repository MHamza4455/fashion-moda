<script>
  (function (ns, fetch){
    ns.fetch = function() {
      const response = fetch.apply(this, arguments);
      response.then(res => {
        if (res.url && `${window.location.origin}/cart/add.js`.includes(res.url)){
          return res.clone().json();
        }
      }).then(data=>{
        if(data){
          kl_addedToCart(data);
        }
      });
      return response
    }
  }(window, window.fetch));




  function kl_addedToCart(data){


    let item = {
      "Name": data.title,
      "ImageURL": data.image,
      "ProductID": data.product_id,
      "VariantID": data.variant_id,
      "Categories": false,
      "URL": data.url,
      "Brand": data.vendor,
    }



    let priceInCurrency = (data.final_price / 100).toLocaleString('en-GB', {
      style: 'currency',
      currency: '{{ shop.currency }}'
    });
    item["Price"] = priceInCurrency;





    fetch(`/products/${data.handle}?section_id=api-product-grid-item`).then(response=>{
      return response.text();
    }).then(response=>{



      const parser = new DOMParser();
      let product_data = parser.parseFromString(response, 'text/html');
      let product_data_text = JSON.parse(product_data.querySelector('noscript').innerHTML);

      

      item["Categories"] = product_data_text['Categories'];
      if(product_data_text["CompareAtPriceVariants"][data.variant_id]){
        item["CompareAtPrice"] = product_data_text["CompareAtPriceVariants"][data.variant_id]
      }


       _learnq.push(['track', 'Added to Cart', item]);


    })
  };





</script>











{% if product %}
 <script>
  window.addEventListener('load', function(){
    var _learnq = window._learnq || [];
    var item = {
      {% if product.has_only_default_variant %}
        "Name": "{{ product.title | escape }}",
        "ImageURL": "https:{{ product.featured_image.src | img_url:'grande' }}",
      {% else %}
        "Name": "{{ product.title | escape }} - {{ product.selected_or_first_available_variant.title | escape }}",
        "ImageURL": "https:{{ product.selected_or_first_available_variant.featured_image.src | img_url:'grande' }}",
      {% endif %}
      "ProductID": {{ product.id | json }},
      "VariantID": {{ product.selected_or_first_available_variant.id | json }},
      "Categories": {{ product.collections| map: 'title' | json }},
      "URL": "{{ shop.secure_url }}{{ product.selected_or_first_available_variant.url }}",
      "Brand": {{ product.vendor | json }},
      "Price": {{ product.selected_or_first_available_variant.price | money | json }},
      {% if product.selected_or_first_available_variant.price >= product.selected_or_first_available_variant.compare_at_price %}
        "CompareAtPrice": ''
      {% else %}
        "CompareAtPrice": {{ product.selected_or_first_available_variant.compare_at_price | money | json }}
      {% endif %}
    };


    // Track Viewed Product event on page load
    _learnq.push(['track', 'Viewed Product', item]);


    document.addEventListener("theme:variant:change", e => {
      // Update item properties based on the changed variant's information
      item["VariantID"] = e.detail.variant.id;
      item["Name"] = e.detail.variant.name;
      item["ImageURL"] = "https:" + e.detail.variant.featured_image.src; // Ensure a proper URL format

      // Retrieve the current currency code from Shopify
      const shopCurrency = "{{ shop.currency }}";

      // Convert price from cents to the currency format based on the site's currency
      const priceInCents = e.detail.variant.price; // Assuming price is in cents
      const priceInCurrency = (priceInCents / 100).toLocaleString('en-GB', {
        style: 'currency',
        currency: '{{ shop.currency }}'
      });
      item["Price"] = priceInCurrency;

      // Convert compare at price from cents to the currency format based on the site's currency.  Set to null if empty or equal to price
      const comparePriceInCents = e.detail.variant.compare_at_price; // Assuming price is in cents
      let comparePriceInCurrency = '';
      if (comparePriceInCents !== null && comparePriceInCents !== 0 && comparePriceInCents !== priceInCents && comparePriceInCents > priceInCents) {
        comparePriceInCurrency = (comparePriceInCents / 100).toLocaleString('en-GB', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        });
      }	
      item["CompareAtPrice"] = comparePriceInCurrency;


      // Track Viewed Product event on variant change
      _learnq.push(['track', 'Viewed Product', item]);


    });










    /*

    var klAjax = true;
    {% unless template.name == "product" %}
      var atcButtons = document.querySelectorAll("form[action*='/cart/add'] button[type='submit']");
      for (var i = 0; i < atcButtons.length; i++) {
          atcButtons[i].addEventListener("click", function() {
            
            var grid_items = $(this).parents('.product-grid-item__inner').find('noscript[getScript]').html();
            if (klAjax) {

              _learnq.push(['track', 'Added to Cart', JSON.parse(grid_items)]);
              klAjax = false;
            }
          })
      }
      {% else %}

      

      var atcButtons = document.querySelectorAll("form[action*='/cart/add'] button[type='submit']");
      for (var i = 0; i < atcButtons.length; i++) {
          atcButtons[i].addEventListener("click", function() {

            if (klAjax) {
              _learnq.push(['track', 'Added to Cart', item ]);
              klAjax = false;
            }
          })
      }

    {% endunless %}
    
    */

  });





  </script>
{% endif %}
