{% if settings.revievePartnerID != blank %}
  <script type = "text/javascript">
    var config = {
      partner_id: '{{ settings.revievePartnerID }}', // revieve partner_id
      locale: 'en',
      env: '{{ settings.revieveEnvironment }}', // environment setting of either prod or test
      
      onAddToCart: function(products) {
        if (Array.isArray(products)) {
          // Array means we got multiple products (add all to cart)
          console.log('User clicked add all to cart. Adding all products to the shopping cart.');
          console.log(products);
          
          var formData = {
            items: [],
          };
          
          products.forEach((product) => {
            formData.items.push({
              id: product.id,
              quantity: 1,
            });
          });
          
          console.log('form data is' + JSON.stringify(formData));
          
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          })
          
          .then((response) => {
            return response.json();
          })
          
          .then((data) => {
            console.log(data);
          })
          
          .catch((error) => {
            console.error('Error:', error);
          });
          
        } else {
          // Single object means we got one product (add to cart)
          console.log('User clicked add to cart. Adding the product to the shopping cart.');
          console.log(products);
          
          var formData = {
            items: [{
              id: products.id,
              quantity: 1,
            }, ],
          };
          
          console.log('form data is' + JSON.stringify(formData));
          
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          })
          
          .then((response) => {
            return response.json();
          })
          
          .then((data) => {
            console.log(data);
          })
          
          .catch((error) => {
            console.error('Error:', error);
          });
        }
      },
          
      onClose: function(data) {
        // User closed modal. Here you could forward them to checkout if they had
        // added products (onAddToCart was called before).
        return
        console.log("close" + data);
        Revieve.API.hide();
      },

      onSubmitConsent: function(data) {

          let data_for_klaviyo = transformDataForKlaviyo(data);

          let klaviyo_url = 'https://a.klaviyo.com/client/events/?company_id={{settings.klaviyo_api_key}}';
          let klaviyo_options = {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
              'Revision': '2024-06-15'
            },
            body: JSON.stringify(data_for_klaviyo)
          };
          fetch(klaviyo_url, klaviyo_options);

      },

      onSendEmail: function(data) {
        console.log('onSendEmail', data);
      },
          
      onCheckout: function(data) {
        // User clicked the checkout button that is visible on results page
        // after adding one or more products to cart. Redirect to checkout page?
        return window.location.assign("/cart"); // assign your cart address
      },
          
      onClickProduct: function(product) {
        // To be filled in by skincaredemo.
        console.log("User clicked info action.");
        console.log(product);
        var win = window.open(product.url, '_blank');
        win.focus();
      },
    };
        
    (function() {
      var rv = document.createElement('script');
      rv.src = 'https://d38knilzwtuys1.cloudfront.net/revieve-plugin-v4/revieve-plugin-loader.js';
      rv.charset = 'utf-8';
      rv.type = 'text/javascript';
      rv.async = 'true';
      rv.onload = rv.onreadystatechange = function() {
        var rs = this.readyState;
        if (rs && rs != 'complete' && rs != 'loaded') return;
        Revieve.Init(config, function() {
          // Comment out the below line if you want to open the modal
          // manually when user clicks a certain button or navigates
          // to certain page.
          // Revieve.API.show();
        });
      };
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(rv, s);
    })();

function transformDataForKlaviyo(data) {
    var result = {};

    if(!data){
      return result
    }

    var name = data.name.split(" ");
    var firstName = name[0];
    var lastName = name.length === 2 ? name[1] : '';
    var productRecommendations = data.productRecommendations.products;
    var recommendations = [];
    var recommendedProducts = [];
    for (let i = 0; i < productRecommendations.length; i++) {
        let product = productRecommendations[i];
        recommendations.push(product.name);
        let categories = [product.category];
        for (let j = 0; j < product['filter_match'].length; j++) {
            categories.push(product['filter_match'][j]);
        }
        recommendedProducts.push({
            ProductID: product.id,
            SKU: product.id,
            ProductName: product.name,
            ItemPrice: product.price,
            ProductURL: product.url,
            ImageURL: product.image,
            ProductCategories: categories
        });
    }
    // productRecommendations
    result = {
      data: {
        type: "event",
        attributes:{
          profile:{
            data:{
              type: 'profile',
              attributes:{ 
                "email": data.emailAddress,
                "first_name": firstName, // See note 1 above
                "last_name": lastName, // See note 2 above
                properties:{
                  "Submitted Hair Quiz Response": true,
                  "After_Wash": data.quiz && 'After_Wash' in data.quiz ? data.quiz.After_Wash : null,
                  "Look": data.quiz && 'Look' in data.quiz ? data.quiz.Look : null,
                  "Hair_Density": data.quiz && 'Hair_Density' in data.quiz ? data.quiz.Hair_Density : null,
                  "Hair_Type": data.quiz && 'Hair_Type' in data.quiz ? data.quiz.Hair_Type : null,
                  "Hair_Volume": data.quiz && 'Hair_Volume' in data.quiz ? data.quiz.Hair_Volume : null,  // This is only returned in the JSON if the Customer takes a selfi"e
                  "Hair_Goals": data.quiz && 'Hair_Goals' in data.quiz ? data.quiz.Hair_Goals : null,
                  "Scalp_Concerns": data.quiz && 'Scalp_Concerns' in data.quiz ? data.quiz.Scalp_Concerns : null,
                  "Secondary_Goals": data.quiz && 'Secondary_Goals' in data.quiz && data.quiz.Secondary_Goals.length > 0 ? data.quiz.Secondary_Goals : [],
                  "selfie_consent": data.quiz && 'selfie_consent' in data.quiz ? data.quiz.selfie_consent : null,
                  "selfieSource": data.quiz && 'selfieSource' in data.quiz ? data.quiz.selfieSource : null,
                  "Recommendations": recommendations,
                  "Recommended Products": recommendedProducts,
                }
              }
            }
          },
          metric:{
              data:{
                type: 'metric',
                attributes:{
                  name: 'Submitted Response'
                }
              }
          },
          properties:{
            "After_Wash": data.quiz && 'After_Wash' in data.quiz ? data.quiz.After_Wash : null,
            "Look": data.quiz && 'Look' in data.quiz ? data.quiz.Look : null,
            "Hair_Density": data.quiz && 'Hair_Density' in data.quiz ? data.quiz.Hair_Density : null,
            "Hair_Type": data.quiz && 'Hair_Type' in data.quiz ? data.quiz.Hair_Type : null,
            "Hair_Volume": data.quiz && 'Hair_Volume' in data.quiz ? data.quiz.Hair_Volume : null,
            "Hair_Goals": data.quiz && 'Hair_Goals' in data.quiz ? data.quiz.Hair_Goals : null,
            "Scalp_Concerns": data.quiz && 'Scalp_Concerns' in data.quiz ? data.quiz.Scalp_Concerns : null,
            "Secondary_Goals": data.quiz && 'Secondary_Goals' in data.quiz && data.quiz.Secondary_Goals.length > 0 ? data.quiz.Secondary_Goals : [],
            "selfie_consent": data.quiz && 'selfie_consent' in data.quiz ? data.quiz.selfie_consent : null,
            "selfieSource": data.quiz && 'selfieSource' in data.quiz ? data.quiz.selfieSource : null,
            "Recommendations": recommendations,
            "Recommended Products": recommendedProducts,
          }
        }
      }
    }
    
    return result;
}

  </script>
{% endif %}

